#Ansible playbook for deploying, undeploying and restarting the weathercast application

#------------------- The following tags can be used -------------------

#-t prepare_instance - install docker and docker compose on managed machine
#-t deploy - deploy the application
#-t restart - restart the application
#-t rebuild - rebuild the application (enforce rebuilding docker images)
#-t undeploy - undeploy the application

#------------------- The following external variables can be provided during plabook execution  -------------------

#-e e_user=value - define the username (system account) used during deployment (ec2-user - default value)
#-e e_hosts=value - name the of host group defined in inventory (localhost - default value)
#-e e_FQDN=value - under this FQDN application will be visible (the relevant DNS record poiting proper IP has to exist) (weathercast.dwolnicki.net - defaule value) 

#EXAMPLES of usage

#Install runtime and deploy application on local machine
#ansible-playbook -i ./inventory  ./app_weathercast.yml -t prepare_instance,deploy 

#Undeploy application from remote instance defined under group name "aws_docker" in ./inventory file
#ansible-playbook -i ./inventory ./app_weathercast.yml -t undeploy -e e_hosts=aws_docker


---
- name: Prepare runtime environment
  remote_user: "{{ e_user | default('ec2-user') }}"
  become: yes
  hosts: "{{ e_hosts | default('localhost') }}"

  tasks:

    - block:
    
      - name: Install Docker
        ansible.builtin.yum:
          state: installed
          name:
            - docker
          
      - name: Append docker group
        ansible.builtin.user:
          name: "{{ ansible_env.SUDO_USER }}"
          groups: docker
          append: yes
      
      - name: Start docker engine
        ansible.builtin.service:
          name: docker
          state: started
          enabled: yes      

      tags:
        - prepare_instance
        - never

#  handlers:

#    - name: Append docker group
#      ansible.builtin.user:
#        name: "{{ ansible_user_id }}"
#        groups: docker
#        append: yes


- name: Deplpy weathercast on ec2
  remote_user: "{{ e_user | default('ec2-user') }}"
  become: no
  hosts: "{{ e_hosts | default('localhost') }}"

  vars:
    FQDN: "{{ e_FQDN | default(backend.endpoint.FQDN)}}"

  tasks:

    - name: Include vars
      ansible.builtin.include_vars:
        dir: vars
      tags:
        - always

    - block:
        - name: Install docker-compose
          ansible.builtin.pip:
            name: docker-compose

        - name: Sync deployment files
          ansible.posix.synchronize:
            src: ../deploy/
            dest: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}/
            delete: yes
            archive: no
            recursive: yes

        - name: Create docker compose from template
          ansible.builtin.template:
            src: templates/docker-compose.j2
            dest: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}/docker-compose.yaml

        - name: Docker compose up
          community.docker.docker_compose:
            project_src: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}
          register: reg_docker_compose_up
          #notify:
          #  - ACL

        - debug:
            msg: "{{ reg_docker_compose_up }}"

      tags:
        - deploy
        - never 

    - block:
        - name: Restart services
          community.docker.docker_compose:
            project_src: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}
            build: false
            restarted: true
          register: reg_docker_compose_restart
          
        - debug:
            msg: "{{ reg_docker_compose_restart }}"
      tags:
        - restart
        - never

    - block:
        - name: Rebuild services
          community.docker.docker_compose:
            project_src: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}
            build: true
          register: reg_docker_compose_rebuild
          #notify:
          #  - ACL
  
        - debug:
            msg: "{{ reg_docker_compose_rebuild }}"

      tags:
        - rebuild
        - never

    - block:
      - name: Undeploy app
        community.docker.docker_compose:
          project_src: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}
          state: absent
          remove_images: local
          remove_volumes: true
        register: reg_docker_compose_down

      - debug:
          msg: "{{ reg_docker_compose_down }}"

      - name: Delete deploy directory
        ansible.builtin.file:
          path: /home/{{ ansible_user_id }}/{{ ec2.remote_dir }}
          state: absent
          
      tags:
        - undeploy
        - never

  handlers:
    - name: Find backend volume mounpoint
      shell: docker volume inspect weather_{{ backend.volname }} | jq -r .[].Mountpoint
      register: reg_back_vol_mountpoint
      listen: ACL

    - name: Find frontend volume mounpoint
      shell: docker volume inspect weather_{{ frontend.volname }} | jq -r .[].Mountpoint
      register: reg_front_vol_mountpoint
      listen: ACL

    - name: Set ACL
      ansible.posix.acl:
        path: "{{ item[1] }}"
        entry: "{{ item[0] }}:{{ ansible_user_id }}:rwx"
        recursive: yes
        state: present
      with_nested:
        - [ 'user', 'd:user']
        - [ '{{ reg_back_vol_mountpoint.stdout }}', '{{ reg_front_vol_mountpoint.stdout }}' ]
      become: yes
      listen: ACL

    - name: Set ACL
      ansible.posix.acl:
        path: /var/lib/docker/
        entry: "user:{{ ansible_user_id }}:--x"
        state: present
      listen: ACL
      
...
